using System;
using System.Collections.Generic;

public class ExampleTargetGenerator_Basic : MaterialTargetGenerator {
    public static List<FileTarget> GenerateTargets() {
        List<FileTarget> fileTargets = new List<FileTarget>();

        // Initialize a FileTarget by supplying the path (leading up to the name), and the name itself.
        // The name is appended onto the path so the divide is arbitrary; it's just separated so console output can be less cluttered.
        string magikVfxLocalPathPrefix = "Marvel\\Content\\Marvel\\VFX\\Materials\\Characters\\1029\\Materials\\";
        string magikSampleVfxFilename = "MI_1029500_Flow_26_001";
        FileTarget sampleFileTarget = new FileTarget(magikVfxLocalPathPrefix, magikSampleVfxFilename);

        // Supply a scalar/vector target conditional function, and a modification function to go with it.

        // So usually we want to target vectors containing the word "Color".
        // This is a lambda function which takes a parameter name (which will be supplied from the vector's ParameterInfo).
        // You want the function to return true if the given name is one that you want to target.
        Func<string, bool> sampleVectorTargetFunc = name => name.ToLower().Contains("color");

        // Now we define the function which will perform an operation on the targeted vector's value. 
        // This one will just divide each RGB channel by 2.
        Func<float[], float[]> sampleVectorModifyFunc = value => [value[0] / 2f, value[1] / 2f, value[2] / 2f];

        // Now add the two functions to the filetarget (they're stored together as a tuple)
        sampleFileTarget.AddVectorTarget(sampleVectorTargetFunc, sampleVectorModifyFunc);

        // Don't forget to add your new fileTarget to the List.
        fileTargets.Add(sampleFileTarget);

        // That's it! You can pass the list generated by this function to ModifyAndWrite() in the main method.
        // It'll find the corresponding file, locate vectors which succeed the targeting function, and perform the modification on their value.
        // Use whatever logic you need to generate this list; see MagikMaterials() for a big ugly example I use to generate changes for Magik.
        // Though first look at SampleTargetGenerator_Advanced() for some slightly more in-depth concepts.

        return fileTargets;
    }
}